/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package generators

import templates.COPYRIGHT_NOTICE
import templates.readCopyrightNoticeFromProfile
import java.io.File
import java.io.FileNotFoundException
import java.io.FileWriter

fun main(args: Array<String>) {
    val baseDir = File(args.first())

    val unicodeData = baseDir.resolve("libraries/tools/kotlin-stdlib-gen/src/generators/UnicodeData.txt")
    if (!unicodeData.exists()) {
        throw FileNotFoundException("Please place UnicodeData.txt at ${unicodeData.parent}")
    }

    COPYRIGHT_NOTICE = readCopyrightNoticeFromProfile { Thread.currentThread().contextClassLoader.getResourceAsStream("apache.xml").reader() }

    val testGenerator = CharCategoryTestGenerator(baseDir)
    val rangesGenerator = CharCategoryRangesGenerator(baseDir)

    unicodeData.forEachLine { line ->
        val parts = line.split(";")
        if (parts[0].length <= 4) {
            testGenerator.appendLine(parts[0], parts[1], parts[2])
            rangesGenerator.appendLine(parts[0], parts[1], parts[2])
        }
    }

    testGenerator.close()
    rangesGenerator.close()
}

private const val autoGeneratedNotice: String = """
//
// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt
// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib
//
"""

private class CharCategoryTestGenerator(baseDir: File) {
    private var arrayIndex = 0
    private var arraySize = 0
    private val outputFile = baseDir.resolve("libraries/stdlib/test/text/unicodeData/_UnicodeDataFlatten.kt")
    private var writer: FileWriter? = null

    init {
        outputFile.parentFile.mkdirs()
    }

    fun appendLine(char: String, name: String, categoryCode: String) {
        if (arraySize == 0) {
            writer?.appendLine(")")
            writer?.close()

            generateUnicodeDataHeader(arrayIndex)
        }

        val isStart = name.endsWith(", First>")

        writer?.appendLine("    CharProperties(char = '\\u$char', isStartOfARange = $isStart, categoryCode = \"$categoryCode\"),")

        arraySize++
        if (arraySize == 2048) {
            arraySize = 0
            arrayIndex++
        }
    }

    fun close() {
        writer?.appendLine(")")
        writer?.close()

        generateFlattenUnicodeData()
        generateCharProperties()
        generateCharCategoryTest()
    }

    private fun generateFlattenUnicodeData() {
        generateFileHeader(outputFile)

        writer?.appendLine("internal val unicodeData = arrayOf<Array<CharProperties>>(")
        for (index in 0..arrayIndex) {
            writer?.appendLine("    unicodeData$index,")
        }
        writer?.appendLine(").flatten()")

        writer?.close()
    }

    private fun generateCharProperties() {
        val file = outputFile.resolveSibling("_CharProperties.kt")
        generateFileHeader(file)

        writer?.appendLine("data class CharProperties(val char: Char, val isStartOfARange: Boolean, val categoryCode: String)")
        writer?.close()
    }

    private fun generateCharCategoryTest() {
        val file = outputFile.resolveSibling("_CharCategoryTest.kt")
        generateFileHeader(file)

        writer?.appendLine(
            """
import kotlin.test.*

class CharCategoryTest {
    @Test
    fun category() {
        val charProperties = hashMapOf<Char, CharProperties>()

        for (properties in unicodeData) {
            charProperties[properties.char] = properties
        }

        var properties: CharProperties? = null

        for (char in Char.MIN_VALUE..Char.MAX_VALUE) {
            if (charProperties.containsKey(char)) {
                properties = charProperties.getValue(char)
            } else if (properties?.isStartOfARange != true) {
                properties = null
            }

            val charCode = char.toInt().toString(radix = 16).padStart(length = 4, padChar = '0')
            val expectedCategoryCode = properties?.categoryCode ?: CharCategory.UNASSIGNED.code

            assertEquals(
                expected = expectedCategoryCode,
                actual = char.category.code,
                "Char:[${"$"}char] with code:[${"$"}charCode] in Unicode and has category [${"$"}expectedCategoryCode], but in Kotlin [${"$"}{char.category.code}]"
            )
        }
    }
}
            """.trimIndent()
        )

        writer?.close()
    }

    private fun generateUnicodeDataHeader(arrayIndex: Int) {
        val file = outputFile.resolveSibling("_UnicodeData$arrayIndex.kt")
        generateFileHeader(file)

        writer?.appendLine("internal val unicodeData$arrayIndex = arrayOf<CharProperties>(")
    }

    private fun generateFileHeader(file: File) {
        println("Generating file: $file")
        writer = FileWriter(file)

        writer?.appendLine(COPYRIGHT_NOTICE)
        writer?.appendLine("package test.text.unicodeData")
        writer?.appendLine(autoGeneratedNotice)
    }
}

private class CharCategoryRangesGenerator(baseDir: File) {
    private val start = mutableListOf<Int>()
    private val end = mutableListOf<Int>()
    private val category = mutableListOf<MutableList<String?>>()

    // generate for js-ir too
    private val outputFile = baseDir.resolve("libraries/stdlib/js/src/generated/_CharCategories.kt")

    fun appendLine(char: String, name: String, categoryCode: String) {
        val charCode = char.toInt(radix = 16)

        require(charCode == 0 || start.isNotEmpty())

        if (start.isEmpty() || name.endsWith(", First>")) {
            start.add(charCode)
            end.add(charCode)
            category.add(mutableListOf(categoryCode, null))
            return
        }
        if (name.endsWith(", Last>")) {
            end[end.lastIndex] = charCode
            check(category.last().first() == categoryCode)
            return
        }

        val lastCategory = category.last()[charCode and 1]

        if (end.last() == charCode - 1 && (lastCategory == null || lastCategory == categoryCode)) {
            end[end.lastIndex] = charCode
            category.last()[charCode and 1] = categoryCode
        } else {
            start.add(charCode)
            end.add(charCode)
            category.add(mutableListOf(null, null))
            category.last()[charCode and 1] = categoryCode
        }
    }

    fun close() {
        FileWriter(outputFile).use { writer ->
            println("Generating file: $outputFile")
            writer.appendLine(COPYRIGHT_NOTICE)
            writer.appendLine("package kotlin.text")
            writer.appendLine(autoGeneratedNotice)
            writer.writeIntArray("rangeStart", start) { it }
            writer.appendLine()
            writer.writeIntArray("rangeEnd", end) { it }
            writer.appendLine()

            val categoryCodeToValue = CharCategory.values().associateBy({ it.code }, { it.value })

            writer.writeIntArray("categoryOfRange", category) { (even, odd) ->
                if (even == null || odd == null || even == odd) {
                    categoryCodeToValue[even ?: odd]!!
                } else {
                    categoryCodeToValue[even]!! + (categoryCodeToValue[odd]!! shl 8)
                }
            }
            writer.appendLine()
            writer.appendLine(binarySearch())
            writer.appendLine()
            writer.appendLine(getCategoryValue())
        }
    }

    private fun binarySearch(): String = """
        private fun binarySearchRange(array: IntArray, needle: Int): Int {
            var bottom = 0
            var top = array.size - 1
            var middle = -1
            var value = 0
            while (bottom <= top) {
                middle = (bottom + top) / 2
                value = array[middle]
                if (needle > value)
                    bottom = middle + 1
                else if (needle == value)
                    return middle
                else
                    top = middle - 1
            }
            return middle - (if (needle < value) 1 else 0)
        }
        """.trimIndent()

    private fun getCategoryValue(): String = """
        internal fun getCategoryValue(ch: Int): Int {
            val index = binarySearchRange(rangeStart, ch)
            val high = rangeEnd[index]
            if (ch <= high) {
                val code = categoryOfRange[index]
                if (code < 0x100) {
                    return code
                }
                return if ((ch and 1) == 1) code shr 8 else code and 0xff
            }
            return CharCategory.UNASSIGNED.value
        }
        """.trimIndent()

    private fun <E> FileWriter.writeIntArray(name: String, elements: List<E>, transform: (E) -> Int) {
        append("private val $name = intArrayOf(")
        for (i in elements.indices) {
            if (i % 20 == 0) {
                appendLine()
                append("    ")
            }
            val value = transform(elements[i])
            append("0x${value.hex()}, ")
        }
        appendLine()
        appendLine(")")
    }

    private fun Int.hex(): String = toString(radix = 16).padStart(4, '0')
}